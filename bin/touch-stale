#!/usr/bin/env perl
###########################################################################
#
#   Copyright 2012 American Public Media Group
#
#   This file is part of AIR2.
#
#   AIR2 is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   AIR2 is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with AIR2.  If not, see <http://www.gnu.org/licenses/>.
#
###########################################################################

#
# touch stale flag for records
#
use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin/../lib/perl";
use Carp;
use AIR2::Config;
use AIR2::StaleRecord;
use AIR2::SearchUtils;
use Module::Load ();

my %stale_types = %{ AIR2::SearchUtils::get_stale_type_map() };

my @args;
if (@ARGV) {
    @args = @ARGV;
}
else {
    @args = <>;    # read from stdin
}

for my $f (@args) {
    chomp $f;
    my ( $type, $xid ) = split( m!/!, $f );
    my $str_type;
    if ( length $type > 1 ) {
        if ( !exists $stale_types{$type} ) {
            die "Invalid record type: $type\n";
        }
        $str_type = $stale_types{$type}->[0];
    }
    else {
        $str_type = $type;
    }

    #warn "type=$type str_type=$str_type xid=$xid";
    if ( $xid =~ m/\D/ or length($xid) == 12 ) {

        # assume uuid, look up xid
        my $uuid = $xid;
        my $class;
        for my $t ( keys %stale_types ) {
            if ( $stale_types{$t}->[0] eq $str_type ) {
                $class = $stale_types{$t}->[1];
            }
        }
        if ( !$class ) {
            die "No class for $f";
        }
        Module::Load::load $class;
        my $obj = $class->new( $class->get_uuid_column => $uuid )->load;
        $xid = $obj->primary_key_value;
        warn "using xid $xid for assumed uuid $uuid\n";
    }

    my $sr = AIR2::StaleRecord->new(
        str_xid  => $xid,
        str_type => $str_type,
    );
    $sr->insert_or_update_on_duplicate_key();
}
