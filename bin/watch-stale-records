#!/usr/bin/env perl
###########################################################################
#
#   Copyright 2012 American Public Media Group
#
#   This file is part of AIR2.
#
#   AIR2 is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   AIR2 is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with AIR2.  If not, see <http://www.gnu.org/licenses/>.
#
###########################################################################

use strict;
use warnings;
use Getopt::Long;
use FindBin;
use Data::Dump qw( dump );
use lib "$FindBin::Bin/../lib/perl";
use AIR2::DBManager;
use AIR2::Utils;
use AIR2::SearchUtils;
use AIR2::Config;
use AIR2::StaleRecord;
use JSON;

#
# this script watches the stale_record table for primary keys to change.
# if it detects a stale record, it re-generates the corresponding XML
# and updates the search server. It fork()s a process for each index
# type, since those can all be run asynchronously from one another.

my $usage = "$0 dir [...dirN]\n";
my $help;
my $debug;
my $default_dirs;
my $sleep_time = 3;
my $pid_file   = "/tmp/watch-stale-records.pid";
GetOptions(
    'help'        => \$help,
    'debug'       => \$debug,
    'default'     => \$default_dirs,
    'pid_file=s'  => \$pid_file,
    'sleep=i'     => \$sleep_time,
) or die $usage;
die $usage if $help;

# write our pid to a file
system("echo $$ > $pid_file");

# clean up when we exit
END {
    print "Removing pid file for $0 [$$]: $pid_file\n";
    system("rm -f $pid_file");
}

##############################################################################
# main loop
##############################################################################

my %functions = (
    'S' => { idx => [ 'sources',   'fuzzy-sources' ], },
    'R' => { idx => [ 'responses', 'fuzzy-responses' ], },
    'P' => { idx => ['projects'], },
    'I' => { idx => ['inquiries'], },
    'A' => { idx => ['public_responses'], },
);

AIR2::Utils::logger "watching for stale records\n";

while (1) {

    #AIR2::Utils::logger "checking stale_record count\n";
    my %types;

    if ( my $stale_records = get_stale_records() ) {

    STALE: while ( my $stale = $stale_records->next ) {

            # we only care about the type, since the *2xml script
            # will actually manage/delete the stale record.
            my $pk   = $stale->str_xid;
            my $type = $stale->str_type;

            AIR2::Utils::logger "type=$type  pk=$pk\n";

            if ( !exists $functions{$type} ) {
                AIR2::Utils::logger "No function defined for '$type'\n";
                next STALE;
            }

                for my $idx ( @{ $functions{$type}->{idx} } ) {
                    $types{$idx}++;
                }

            }

    }

    # kick off the ext procs if we have anything new
    if (%types) {
        my $cmd = "$^X $FindBin::Bin/build-search --increm --xml --index "
            . join( ' ', sort keys %types );
        AIR2::Utils::logger("$cmd\n");
        my @buf = `$cmd`;
        AIR2::Utils::logger($_) for @buf;
    }

    sleep($sleep_time);

}

#############################################################################
# functions
#############################################################################

sub get_stale_records {
    my $count = AIR2::StaleRecord->fetch_count();
    if ( !$count ) {
        return 0;
    }
    return AIR2::StaleRecord->fetch_all_iterator();
}

